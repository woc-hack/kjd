#! /bin/bash
#
# Find meta data from each project
#
#------------------------------------------------------------------------

# Check the command line args
if [[ $# -ne 1 ]]; then
   echo "usage: vca-phase2 <output directory>" >&2
   echo "example: ./vca-phase3 out/CVE-2007-12345" >&2
   exit 1
fi

dir="$1"
outdir="$dir/phase3"
error_log=$outdir/log.error
warning_log=$outdir/log.warning
phase2_dir="$dir/phase2"
mydir="$(pwd)"
hostname=`uname -n`
if [ "$hostname" = "da1.eecs.utk.edu" ]; then
    echo "Note: $0 runs faster on da1" 
fi

if [ ! -d "$dir" ]; then
   echo Error: directory $dir does not exists >&2
   exit 1
fi
if [ ! -d "$outdir" ]; then
   echo Error: directory $outdir does not exists >&2
   exit 1
fi

# Make sure good_blobs.txt and bad_blobs.txt exist in the directory
if [ ! -d "$phase2_dir" ]; then
    echo "$phase2_dir not found" | tee -a $error_log
    exit 1
fi

# If there is an old report, remove it
rm -f $dir/report.csv
touch $dir/report.csv
rm -f $dir/report.md

# get the CVE name
cve=`cut -d\; -f 1 $dir/input_line`

# Create the final results file
pcache_file="./cache/p_metadata.global"
mcache_file="./cache/m_metadata.global"
rm -f $dir/cache.p_metadata $dir/cache.m_metadata
if [ -f "$phase2_dir/results.csv" ]; then
    OLDIFS=$IFS
    IFS=$'\n'
    for line in $(cat $phase2_dir/results.csv); do
        project=$(echo $line | cut -d "," -f 1 | sed -e "s/^[ \t]*//" -e "s/[ \t]*$//" -e "s/Project://")
        project_slash=$(echo $project | sed -e "s@_@/@")
        project_url=$(./toUrl $project | sed -e "s@https?*://@@")

        # check to see if the project still exists and is publicly accessible 
        if ! curl --output /dev/null --silent --head --fail -L "https://$project_url"; then
            echo "not-accessible: https://$project_url" | tee -a $warning_log 
            echo "https://$project_url" >> $outdir/not-accessible.txt
            echo "curl --output /dev/null --silent --head --fail -L https://$project_url" >> $outdir/not-accessible.txt
            # The curl command above sometimes fails, even for projects that
            # exist. For that reason, the continue line below is commented 
            # out. Phase 2 should filter out not-available projects, but
            # sometimes does not.
            #continue
        fi


        platform=`echo $project_url | sed -e "s@https?*://@@" -e "s/\.com.*$//" -e "s/\.org.*$//"`

        # get meta data from platform (github, gitlab, etc)
        cache=""
        if [ -f $pcache_file ]; then
            cache=$(grep "^$project," $pcache_file | head -n 1)
        fi

        if [ "$cache" = "" ]; then
            #echo "CACHE MISS-p_metadata: $project"  >&2
            pdata=$(./get_metadata $platform $project_slash)
        else
            #echo "CACHE HIT-p_metadata: $project" >&2
            pdata=$(echo "$cache" | sed -e "s@^$project, *@@")
        fi

        # get meta data from WoC mongodb
        cache=""
        if [ -f $mcache_file ]; then
            cache=$(grep "^$project," $mcache_file | head -n 1)
        fi

        if [ "$cache" = "" ]; then
            #echo "CACHE MISS-m_metadata: $project"  >&2
            if [ "$hostname" = "da1.eecs.utk.edu" ]; then
                mdata=$(./get_meta_from_mongo.py "$project")
            else
                mdata=$(ssh da1 $mydir/get_meta_from_mongo.py "$project")
            fi
        else
            #echo "CACHE HIT-m_metadata: $project"  >&2 
            mdata=$(echo "$cache" | sed -e "s@^$project, *@@")
        fi

        if [[ $mdata =~ ^Error ]]; then
            echo "get_meta_from_mongo.py: $mdata"
        else
            echo -n "ProjectUrl:$project_url, " >> $dir/report.csv
            echo -n "$line, " >> $dir/report.csv
            echo -n "$mdata, " >> $dir/report.csv
            echo -n "$pdata" >> $dir/report.csv
            # cache the metadata
            #echo "CACHE WRITING: $project"  >&2
            echo "$project, $pdata" >> $dir/cache.p_metadata
            echo "$project, $mdata" >> $dir/cache.m_metadata
        fi
        echo "" >> $dir/report.csv
    done
    IFS=$OLDIFS
else
    echo "Error: $phase2_dir/results.csv not found" | tee -a $error_log
    exit 1
fi

# convert csv file to a more readable format
echo "# $cve" >> $dir/report.md
sed -e "s/,/\n  -/g" -e "s/ProjectUrl:/\n## /" $dir/report.csv | sed "s/^ *- *$//" >> $dir/report.md

# convert csv file with names and values to csv file with just values
cat $dir/report.csv | awk -F "," -f ./fix.awk > $dir/report.values.csv
if [ $? != 0 ]; then
    error_msg=`tail -n 1 $dir/report.values.csv`
    echo "$error_msg" > $dir/report.values.csv
    echo "$error_msg" | tee -a $error_log
fi


# remove labels from csv file, might make it easier to parse 
#rm -f $dir/report_values.csv
#cat $dir/report.csv | awk -F, ' \
#    { printf("NF = %d\n", NF); \
#      for (i = 1; i <= NF; i++) { \
#        printf ("%d: ", i); \
#        name=gsub(".*:", "", $i); \
#        printf ("name = %s\n", $name) \
#      }\
#    }' \
# >> $dir/report_values.csv 

# if the error log file is empty, delete it so that we only have a file if
# there are errors
if [ ! -s $error_log ]; then
    rm -f $error_log
fi

echo "Success (vca-phase3)"
exit 0
