#! /bin/bash

#
# get_metadata: get the number of stars and number of commits in a remote repo.
#    currently only supports github
#    NOTE: no longer getting commits, can get that from WoC.
# Also get if a project contains a SECURITY.md file.
#    currently supports github, gitlab, and bitbucket.
# Also get if a project is listed in enterprise_projects.txt as an 
#    corporate supported project 
#
# Error output must always go to stderr
# Output of the form GHStars:<value> must always be output to stdout.
#   <value> is a number or else is blank.

#
# on error, print empty fields
#
error_exit ()
{
    echo "GHStars:, GHCommits:, SECURITY.md:, Corp:"
    exit 1
}

#
# Check the command line args
#
if [ $# -ne 2 ]; then
   echo "usage: get_metadata: <host> <project>" >&2
   echo "       supported hosts: github, gitlab, bitbucket" >&2
   echo "           shortcuts: gh, gl, bb" >&2
   echo "       example: get_metadata github openssl/openssl" >&2
   echo "       example: get_metadata github ory/examples" >&2
   echo "       example: get_metadata gitlab tortoisegit/tortoisegit" >&2
   echo "       example: get_metadata bitbucket swsc/lookup" >&2
   $(error_exit)
fi

host=$1
proj=$2
error_status=0

#
# Use jq-linux64 if available, otherwise use jq
#
if which jq-linux64 >/dev/null; then
    JQ=jq-linux64
elif which jq >/dev/null; then
    JQ=jq
else
    echo "The jq command needed for this script is unavailable." >&2
    $(error_exit)
fi

#
# get the github API auth key(s) from ~/github-auth
#
auth=$(./get_github_authkey)
if [ $? -ne 0 ]; then
    $(error_exit)
fi

#
# Main body of script
#

# Check for stars and commits
case $host in
    github|gh)
        # Get the number of stars
        while true; do
            response=$(curl -s -L -H "Authorization: token $auth" "https://api.github.com/repos/$proj")
           if [[ $response = *"rate limit exceeded"* ]]; then
              ./rate_limit_pause $auth get_metadata >&2
              continue
           fi 
           num_stars=$(echo "$response" | $JQ ".stargazers_count")
           # make sure the response is a number (possibly with leading spaces)
           if ! [[ $num_stars =~ ^\ *[0-9]+\ *$ ]]; then 
               echo "Warning: get_metadata: invalid value for num_stars:$numstars" >&2
               echo "   ./get_metadata $1 $2" >&2
               num_stars=""
               error_status=1
           fi
           break
        done

        # Get the number of commits
        num_commits=""
if false; then  # don't need GHCommits, can get from WoC
        while true; do
            response=$(curl -s -k -I -L -H "Authorization: token $auth" "https://api.github.com/repos/$proj/commits?per_page=1")
            #http_code=`echo "$response" | head -n 1 | cut -d " " -f 2`
            http_code=`echo "$response" | grep "^HTTP" | tail -n 1 | cut -d " " -f 2` 
            if [ $http_code -ne 200 ]; then
                echo "get_metadata: Error: reponse code = $http_code" >&2
                echo "   ./get_metadata $1 $2" >&2
                error_status=1
            elif [[ "$response" = *"x-ratelimit-remaining: 0"* ]] || [[ "$response" = *"X-RateLimit-Remaining: 0"* ]]; then
                ./rate_limit_pause $auth get_metadata >&2
            else
                num_commits=`echo "$response" | sed -n '/^[Ll]ink:/ s/.*"next".*page=\([0-9]*\).*"last".*/\1/p'`
               if ! [[ $num_commits =~ ^\ *[0-9]+\ *$ ]]; then 
                   echo "Warning: get_metadata: invalid response for num_commits:$num_commits" >&2
                   echo "   ./get_metadata $1 $2" >&2
                   num_commits=""
                   error_status=1
               fi
            fi
            break
        done
fi

        ;;
#    gitlab|gl)
#        proj=$(echo $proj | sed -e "s@/@%2F@")
#        page=0
#        total=0
#        while true; do
#            page=$((page + 1))
#            url="https://gitlab.com/api/v4/projects/$proj/starrers?per_page=100&page=$page"
#            response=$(curl -s -H "PRIVATE-TOKEN: $glauth" "$url")
#            if [[ "$response" = "[]" ]]; then
#                break
#            else
#                starrers=$(echo "$response" | $JQ length)
#                total=$((total + starrers))
#            fi
#        done
#        echo $total
#        ;;
#    bitbucket|bb)
#        echo "unknown (bitbucket)"
#        ;;
    *)
#        echo "Error: $host not supported, must be one of github, gitlab, or bitbucket" >&2
        error_status=1

esac

# Check for SECURITY.md
secmd=$(./file_exists $host $proj SECURITY.md)

# check if in enterprise_projects.txt
if grep "^https://$host..../$proj " ./enterprise_projects.txt; then
    enterprise="Yes"
else
    enterprise="No"
fi

#
# Output final results
#
echo "GHStars:$num_stars, GHCommits:$num_commits, SECURITY.md:$secmd, Corp:$enterprise"

exit $error_status

