#! /bin/bash
#
# Read files named good_blobs.txt and bad_blobs.txt.
# The file bad_blobs.txt contains a list of blobs that contain a vulnerability.
# The file good_blobs.txt contains a list of blobs that are fixed.
# Find all projects that contain at least one of the good blobs and one of
# the bad blobs. Find and sort the commit dates so that we can see when
# a vulnerability was introduced and when it was fixed.
#
#------------------------------------------------------------------------

# Check the command line args
if [[ $# -ne 2 ]]; then
   echo "usage: go2 <output directory> <time>"
   echo "example: ./go2 out/CVE-2007-12345" 1242055800
   echo ""
   echo "Output directory is per-project directory created by go1."
   echo "This script is called by go once for each project."
   exit 1
fi

dir="$1"
v_unixtime="$2"
error_log=$dir/error_log
outdir="$1/stage2"
if [ ! -d "$dir" ]; then
   echo Error: directory $dir does not exits | tee $error_log
   exit 1
fi
mkdir "$outdir"
if [ $? -ne 0 ]; then
    exit 1
fi


# Make sure good_blobs.txt and bad_blobs.txt exist in the directory
stage1_dir="$dir/stage1"
if [ ! -d "$stage1_dir" ]; then
    echo "$stage1_dir not found" | tee $error_log
    exit 1
fi
if [[ ! -f $stage1_dir/good_blobs.txt || ! -f $stage1_dir/bad_blobs.txt ]]; then
    echo "$stage1_dir (good_blobs.txt or bad_blobs.txt not found)" | tee $error_log
    exit 1
fi

# Get the original project where the vulnerablity was fixed
orig_project=`grep ^project= $stage1_dir/info | cut -d= -f2`
if [ "$orig_project" == "" ]; then
    echo "could not find project name in $stage1_dir/info" | tee $error_log
    exit 1
fi
echo "Original Project = $orig_project"

# Get all project with good (fixed) blobs (_c file also include commit)
cat $stage1_dir/good_blobs.txt | ~/lookup/getValues -f b2c | cut -d\; -f 2 | ~/lookup/getValues -f c2P | cut -d\; -f 2 | sort -u > $outdir/good_projs.txt
cat $stage1_dir/good_blobs.txt | ~/lookup/getValues -f b2c | cut -d\; -f 2 | ~/lookup/getValues -f c2P | sort -u > $outdir/good_projs_c.txt

# Get all project with bad (vulnerable) blobs (_c file also include commit)
cat $stage1_dir/bad_blobs.txt | ~/lookup/getValues -f b2c | cut -d\; -f 2 | ~/lookup/getValues -f c2P | cut -d\; -f 2 | sort -u > $outdir/bad_projs.txt
cat $stage1_dir/bad_blobs.txt | ~/lookup/getValues -f b2c | cut -d\; -f 2 | ~/lookup/getValues -f c2P |  sort -u > $outdir/bad_projs_c.txt

# comm.txt is all the projects that contain both vulnerable and fixed 
# versions of a file. 
comm -12 $outdir/good_projs.txt $outdir/bad_projs.txt | grep -v "$orig_project" > $outdir/comm.txt
rm -f $outdir/good_comm.txt $outdir/bad_comm.txt

# If there are no projects that contain both vulnerable and fixed blobs, quit.
count=`cat $outdir/comm.txt | wc -l`
if [ "$count" == "0" ]; then
    echo "There are no clone projects that contain both vulnerable and fixed blobs" | tee $error_log
    exit 1
fi

# create header line for results.csv file
# time diff is time from cve publication to first fixed commit
echo  "time_diff, project, first good blob commit, first good blob commit time, cve publication date" > $dir/results.csv

# For each project that has contained both vulnerable and fixed blobs, collect
# information.
for line in $(cat $outdir/comm.txt); do
    if [[ "$line" == *"gitorious"* ]]; then
        # c2P does not seem to return the right format for gitorious
        continue
    fi
    grep $line $outdir/good_projs_c.txt > $outdir/tmpfile
    for tmp in $(cat $outdir/tmpfile); do
       time=`echo $tmp | ~/lookup/showCnt commit | cut -d \; -f 7 | awk -F\; '{ printf ("%s;%s\n", $1, strftime("%F:%T", $1)) }'`
        echo "$time;$tmp" >> $outdir/${line}_good.txt
    done
    grep $line $outdir/bad_projs_c.txt > $outdir/tmpfile
    for tmp in $(cat $outdir/tmpfile); do
       time=`echo $tmp | ~/lookup/showCnt commit | cut -d \; -f 7 | awk -F\; '{ printf ("%s;%s\n", $1, strftime("%F:%T", $1)) }'`
        echo "$time;$tmp" >> $outdir/${line}_bad.txt
    done
    sort -n $outdir/${line}_good.txt > $outdir/${line}_good_sorted.txt
    first_good_blob_commit=`head -n 1 $outdir/${line}_good_sorted.txt | cut -d\; -f3`
    first_good_blob_commit_time=`head -n 1 $outdir/${line}_good_sorted.txt | cut -d\; -f1`
    good_time_formatted=`head -n 1 $outdir/${line}_good_sorted.txt | cut -d\; -f2`
    #sort -n $outdir/${line}_bad.txt > $outdir/${line}_bad_sorted.txt
    #first_bad_blob_commit=`head -n 1 $outdir/${line}_bad_sorted.txt | cut -d\; -f3`
    #first_bad_blob_commit_time=`head -n 1 $outdir/${line}_bad_sorted.txt | cut -d\; -f1`
    #bad_time_formatted=`head -n 1 $outdir/${line}_bad_sorted.txt | cut -d\; -f2`

    # find the number of days between cve publication and fixed commit
    diff=$(((first_good_blob_commit_time-v_unixtime)/86400))
    # convert to years and days
    years=`echo "$diff 365.25" | awk '{printf "%.2f", $1 / $2}' | awk -F'.' '{print $1 " years and " $2 " days"}'`

    #echo  $years, $line, $first_good_blob_commit, $good_time_formatted, $first_bad_blob_commit, $bad_time_formatted >> $dir/results.csv
    echo  $years, $line, $first_good_blob_commit, $good_time_formatted, `date -d @$v_unixtime +%Y-%m-%d_%H:%M:%S` >> $dir/results.csv
done
rm -f $outdir/tmpfile

echo "Success (go2)"
